(function(f){function q(a){Ember.Logger.warn(a)}function m(a,c){var b=/(.+)Translation$/,s,e;for(e in a)(s=e.match(b))&&c.call(a,s[1],d.t(a[e]))}function v(){var a=Ember.ENV.I18N_COMPILE_WITHOUT_HANDLEBARS;if(!0===a)return function(a){return function(b){return a.replace(/\{\{(.*?)\}\}/g,function(a,c){return b[c]})}};void 0===a&&q("Ember.I18n will no longer include Handlebars compilation by default in the future; instead, it will supply its own default compiler. Set Ember.ENV.I18N_COMPILE_WITHOUT_HANDLEBARS to true to opt-in now.");
return"function"===typeof h.compile?function(a){return h.compile(a)}:function(){throw new Ember.Error("The default Ember.I18n.compile function requires the full Handlebars. Either include the full Handlebars or override Ember.I18n.compile.");}}var d,t,k,r,n,u,g,h,l;h=f.Handlebars;l=Ember.Handlebars;r=l.get;n=Ember.set;t=Ember.assert;g=function(a,c){var b,d;if(null!=c[a])return c[a];if(-1!==(d=a.indexOf("."))&&(b=a.substr(0,d),d=a.substr(d+1),c=c[b]))return g(d,c)};k=function(a,c){t("You must provide a translation key string, not %@".fmt(a),
"string"===typeof a);var b=g(a,d.translations);c&&null==b&&(b=d.translations[a]=function(){return d.missingMessage(a)},b._isMissing=!0,d.trigger("missing",a));null==b||Ember.$.isFunction(b)||(b=d.translations[a]=d.compile(b));return b};var p;d=Ember.Evented.apply({pluralForm:void 0,compile:function(a){void 0===p&&(p=v());return p(a)},translations:{},eachTranslatedAttribute:m,template:function(a,c){var b;null!=c&&null!=d.pluralForm&&(b=d.pluralForm(c),b="%@.%@".fmt(a,b),b=k(b,!1));return null!=b?b:
k(a,!0)},t:function(a,c){null==c&&(c={});return d.template(a,c.count)(c)},exists:function(a){a=g(a,d.translations);return null!=a&&!a._isMissing},missingMessage:function(a){return"Missing translation: "+a},TranslateableProperties:Ember.Mixin.create({init:function(){var a=this._super.apply(this,arguments);m(this,function(a,b){this.addObserver(a+"Translation",this,function(){n(this,a,d.t(this.get(a+"Translation")))});n(this,a,b)});return a}}),TranslateableAttributes:Ember.Mixin.create({didInsertElement:function(){var a=
this._super.apply(this,arguments);m(this,function(a,b){this.$().attr(a,b)});return a}})});Ember.I18n=d;u=/(.+)Binding$/;var w=0,x=Ember._MetamorphView.extend({translationKey:null,wrappingTagName:Ember.computed(function(a,c){if(1<arguments.length&&null!=c)return c;var b;Ember.FEATURES.hasOwnProperty("I18N_TRANSLATE_HELPER_SPAN")?b=Ember.FEATURES.I18N_TRANSLATE_HELPER_SPAN:(Ember.deprecate("The {{t}} helper will no longer use a <span> tag in future versions of Ember.I18n. Set Ember.FEATURES.I18N_TRANSLATE_HELPER_SPAN to false to quiet these warnings and maintain older behavior."),
b=!0);return b?"span":null}),render:function(a){var c=this.get("wrappingTagName"),b=Ember.I18n.t(this.get("translationKey"),this.get("context"));c&&a.push("<"+c+' id="'+("i18n-"+ ++w)+'">');a.push(b);c&&a.push("</"+c+">")}});l.registerHelper("t",function(a,c){var b=this,d=c.data,e=c.hash,f=e.tagName;delete e.tagName;"STRING"!==c.types[0]&&q("Ember.I18n t helper called with unquoted key: %@. In the future, this will be treated as a bound property, not a string literal.".fmt(a));Ember.deprecate("Passing a tagName to the {{t}} helper is deprecated and will be removed in v3.0.",
null==f);var g=x.create({context:e,translationKey:a,wrappingTagName:f});Ember.keys(e).forEach(function(a){var f=a.match(u);if(f){var m=f[1],h=e[a];a=r(b,h,c);e[m]=a;var k=null;a=l.normalizePath(b,h,d);a=[a.root,a.path];var n=a[0],p=a[1],q=function(){null==g.$()?Ember.removeObserver(n,p,k):(e[m]=r(b,h,c),g.rerender())},k=function(){Ember.run.scheduleOnce("afterRender",q)};return Ember.addObserver(n,p,k)}});d.view.appendChild(g)});f=function(a){var c,b;c=a.hash;b=[];Ember.keys(c).forEach(function(a){var e;
e=d.t(c[a]);return b.push('%@="%@"'.fmt(a,e))});return new l.SafeString(b.join(" "))};l.registerHelper("translateAttr",f);l.registerHelper("ta",f);"undefined"!==typeof CLDR&&(Ember.deprecate("CLDR.js has been deprecated; use Ember-I18n's i18n-plurals.js instead."),Ember.I18n.pluralForm=CLDR.pluralForm)}).call(void 0,this);
